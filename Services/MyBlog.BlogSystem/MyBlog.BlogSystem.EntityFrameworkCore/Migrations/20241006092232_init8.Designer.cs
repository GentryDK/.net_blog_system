// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.BlogSystem.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace MyBlog.BlogSystem.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(MyBlogSystemDbContext))]
    [Migration("20241006092232_init8")]
    partial class init8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MyBlog.BlogSystem.Domain.PostInfo.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("BrowseTime")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreateUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("IsClose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostCover")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("longtext");

                    b.Property<string>("summary")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PostTypeId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("MyBlog.BlogSystem.Domain.PostInfo.PostType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cover")
                        .HasColumnType("longtext");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PostTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeBrief")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PostType");
                });

            modelBuilder.Entity("MyBlog.BlogSystem.Domain.PostInfo.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("HeadUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IsClose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QuoteReplyContent")
                        .HasColumnType("longtext");

                    b.Property<string>("QuoteReplyId")
                        .HasColumnType("longtext");

                    b.Property<string>("QuoteReplyUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("MyBlog.BlogSystem.Domain.PostInfo.SensitiveWordsLibrary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LibrartFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LibraryFileUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Statue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SensitiveWordsLibrary");
                });

            modelBuilder.Entity("MyBlog.BlogSystem.Domain.PostInfo.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("MyBlog.BlogSystem.Domain.PostInfo.Post", b =>
                {
                    b.HasOne("MyBlog.BlogSystem.Domain.PostInfo.PostType", "PostType")
                        .WithMany()
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostType");
                });
#pragma warning restore 612, 618
        }
    }
}
